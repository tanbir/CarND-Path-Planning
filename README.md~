# CarND-Path-Planning-Project
Udacity Self-Driving Car Nanodegree - Path Planning Project

# Overview

In this project, we need to implement a path planning algorithms to drive a car on a highway on a simulator provided by Udacity([the simulator could be downloaded here](https://github.com/udacity/self-driving-car-sim/releases/tag/T3_v1.2)). The simulator communicates with the path-planner using [WebSocket](https://en.wikipedia.org/wiki/WebSocket) and sends the  following information: 
#### Main car's localization Data (No Noise)
- ["x"] The car's x position in map coordinates
- ["y"] The car's y position in map coordinates
- ["s"] The car's s position in frenet coordinates
- ["d"] The car's d position in frenet coordinates
- ["yaw"] The car's yaw angle in the map
- ["speed"] The car's speed in MPH

#### Previous path data given to the Planner
- ["previous_path_x"] The previous list of x points previously given to the simulator
- ["previous_path_y"] The previous list of y points previously given to the simulator

#### Previous path's end s and d values 
- ["end_path_s"] The previous list's last point's frenet s value
- ["end_path_d"] The previous list's last point's frenet d value

#### Sensor Fusion Data, a list of all other car's attributes on the same side of the road. (No Noise)

- ["sensor_fusion"] A 2d vector of cars and then that car's [car's unique ID, car's x position in map coordinates, car's y position in map coordinates, car's x velocity in m/s, car's y velocity in m/s, car's s position in frenet coordinates, car's d position in frenet coordinates. 

The simulator expects a set of points spaced in time at 0.02 seconds representing the car's trajectory. The path planner uses the [uWebSockets](https://github.com/uNetworking/uWebSockets) WebSocket implementation to handle this communication. 

# Prerequisites

The project has the following dependencies (from Udacity's seed project):
- cmake >= 3.5
- make >= 4.1
- gcc/g++ >= 5.4
- libuv 1.12.0
- Udacity's simulator.

For instructions on how to install these components on different operating systems, please, visit [Udacity's seed project](https://github.com/udacity/CarND-Path-Planning-Project). 

# Compiling and executing the project

In order to build and compile the code, from within the main repository directory, you can:
`cd build` to create and enter the build directory
`cmake .. && make` to compile your project
`./path_planning` to run your code

```
Listening to port 4567
```

Now the path planner is running and listening on port 4567 for messages from the simulator. Next step is to open Udacity's simulator:

![Simulator first screen](images/udacity_simulator.png)

## Compilation

### The code compiles correctly.

No changes were made in the cmake configuration. A new file was added [src/spline.h](./scr/spline.h), which is the [Cubic Spline interpolation implementation](http://kluge.in-chemnitz.de/opensource/spline/), to use splines instead of polynomials. 

## Valid trajectories

### The car is able to drive at least 4.32 miles without incident.
I ran the simulator for 11, 15 (while changing lane), 18.75, and 21.63 (while changing lane) miles without incidents:

![11 miles](images/11_miles.png)

![15 miles](images/15_miles.png)

![18.75 miles](images/18_75_miles.png)

![21.62 miles](images/21_62_miles.png)

### The car drives according to the speed limit.
No speed limit red message was seen.

### Max Acceleration and Jerk are not Exceeded.
Max jerk red message was not seen.

### Car does not have collisions.
No collisions.

### The car stays in its lane, except for the time between changing lanes.
The car stays in its lane most of the time but when it changes lane because of traffic or to return to the center lane.

### The car is able to change lanes
The car change lanes when the there is a slow car in front of it, and it is safe to change lanes (no other cars around) or when it is safe to return the center lane.

## The Code Model for generating paths

### Prediction 
This part of the code deal with the telemetry and sensor fusion data. In the case, we want to know three aspects of it:
- If a car in front of us is blocking the traffic?
- If a car to the right of us is making a lane change unsafe?
- If a car to the left of us is making a lane change unsafe?

These questions are answered by calculating 
- the lane of each of the other car is and 
- the position it will be at the end of the last plan trajectory. 

A car is considered "dangerous" when it is within 30 meters of our car.

### Behavior
This part decides what to do:
- If we have a car in front of us, do we change lanes?
- Do we speed up or slow down?

Based on the prediction of the situation we are in, this code 
- Increases the speed, decrease speed, or make a lane change when it is safe. Instead of increasing the speed at this part of the code, a `change_in_speed` is created to be used for speed changes when generating the trajectory in the last part of the code. 
- This approach makes the car more responsive acting faster to changing situations like a car in front of it trying to apply breaks to cause a collision.

#### Initializethe spline calculation: 
- If the car has no previous trajectory, then
    - the car position in conjunction with three points at a distance are used
- Otherwise,
    - the last two points of the previous trajectory with three points at a distance are used

    For simplicity for the spline calculation based on those points, the coordinates are transformed (shift and rotation) to local car coordinates.
    
- In order to ensure more continuity on the trajectory (in addition to adding the last two point of the pass trajectory to the spline adjustment), the pass trajectory points are copied to the new trajectory. The rest of the points are calculated by evaluating the spline and transforming the output coordinates to not local coordinates.